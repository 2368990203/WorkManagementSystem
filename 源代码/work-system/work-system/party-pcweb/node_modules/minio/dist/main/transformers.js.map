{"version":3,"sources":["transformers.js"],"names":[],"mappings":"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","file":"transformers.js","sourcesContent":["/*\n * Minio Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2015, 2016 Minio, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as xmlParsers from './xml-parsers.js'\nimport * as _ from 'lodash'\nimport Through2 from 'through2'\nimport Crypto from 'crypto'\nimport JSONParser from 'json-stream'\n\nimport { isFunction } from './helpers.js'\nimport * as errors from './errors.js'\n\n// getConcater returns a stream that concatenates the input and emits\n// the concatenated output when 'end' has reached. If an optional\n// parser function is passed upon reaching the 'end' of the stream,\n// `parser(concatenated_data)` will be emitted.\nexport function getConcater(parser, emitError) {\n  var objectMode = false\n  var bufs = []\n\n  if (parser && !isFunction(parser)) {\n    throw new TypeError('parser should be of type \"function\"')\n  }\n\n  if (parser) {\n    objectMode = true\n  }\n\n  return Through2({objectMode},\n                  function (chunk, enc, cb) {\n                    bufs.push(chunk)\n                    cb()\n                  }, function (cb) {\n                    if (emitError) {\n                      cb(parser(Buffer.concat(bufs).toString()))\n                      // cb(e) would mean we have to emit 'end' by explicitly calling this.push(null)\n                      this.push(null)\n                      return\n                    }\n                    if (bufs.length) {\n                      if (parser) {\n                        this.push(parser(Buffer.concat(bufs).toString()))\n                      } else {\n                        this.push(Buffer.concat(bufs))\n                      }\n                    }\n                    cb()\n                  })\n}\n\n// Generates an Error object depending on http statusCode and XML body\nexport function getErrorTransformer(response) {\n  var statusCode = response.statusCode\n  var code, message\n  if (statusCode === 301) {\n    code = 'MovedPermanently'\n    message = 'Moved Permanently'\n  } else if (statusCode === 307) {\n    code = 'TemporaryRedirect'\n    message = 'Are you using the correct endpoint URL?'\n  } else if (statusCode === 403) {\n    code = 'AccessDenied'\n    message = 'Valid and authorized credentials required'\n  } else if (statusCode === 404) {\n    code = 'NotFound'\n    message = 'Not Found'\n  } else if (statusCode === 405) {\n    code = 'MethodNotAllowed'\n    message = 'Method Not Allowed'\n  } else if (statusCode === 501) {\n    code = 'MethodNotAllowed'\n    message = 'Method Not Allowed'\n  } else {\n    code = 'UnknownError'\n    message = `${statusCode}`\n  }\n\n  var headerInfo = {}\n  // A value created by S3 compatible server that uniquely identifies\n  // the request.\n  headerInfo.amzRequestid = response.headersSent ? response.getHeader('x-amz-request-id') : null\n  // A special token that helps troubleshoot API replies and issues.\n  headerInfo.amzId2 = response.headersSent ? response.getHeader('x-amz-id-2') : null\n  // Region where the bucket is located. This header is returned only\n  // in HEAD bucket and ListObjects response.\n  headerInfo.amzBucketRegion = response.headersSent ? response.getHeader('x-amz-bucket-region') : null\n\n  return getConcater(xmlString => {\n    let getError = () => {\n      // Message should be instantiated for each S3Errors.\n      var e = new errors.S3Error(message)\n      // S3 Error code.\n      e.code = code\n      _.each(headerInfo, (value, key) => {\n        e[key] = value\n      })\n      return e\n    }\n    if (!xmlString) {\n      return getError()\n    }\n    let e\n    try {\n      e = xmlParsers.parseError(xmlString, headerInfo)\n    } catch (ex) {\n      return getError()\n    }\n    return e\n  }, true)\n}\n\n// A through stream that calculates md5sum and sha256sum\nexport function getHashSummer(enableSHA256) {\n  var md5 = Crypto.createHash('md5')\n  var sha256 = Crypto.createHash('sha256')\n\n  return Through2.obj(function(chunk, enc, cb) {\n    \n    if (enableSHA256) {\n      sha256.update(chunk)\n    } else {\n      md5.update(chunk)\n    }\n    cb()\n  }, function(cb) {\n    var md5sum = ''\n    var sha256sum = ''\n    if (enableSHA256) {\n      sha256sum = sha256.digest('hex')\n    } else {\n      md5sum = md5.digest('base64')\n    }\n    var hashData = {md5sum, sha256sum}\n    this.push(hashData)\n    this.push(null)\n    cb()\n  })\n}\n\n// Following functions return a stream object that parses XML\n// and emits suitable Javascript objects.\n\n// Parses CopyObject response.\nexport function getCopyObjectTransformer() {\n  return getConcater(xmlParsers.parseCopyObject)\n}\n\n// Parses listBuckets response.\nexport function getListBucketTransformer() {\n  return getConcater(xmlParsers.parseListBucket)\n}\n\n// Parses listMultipartUploads response.\nexport function getListMultipartTransformer() {\n  return getConcater(xmlParsers.parseListMultipart)\n}\n\n// Parses listParts response.\nexport function getListPartsTransformer() {\n  return getConcater(xmlParsers.parseListParts)\n}\n\n// Parses initMultipartUpload response.\nexport function getInitiateMultipartTransformer() {\n  return getConcater(xmlParsers.parseInitiateMultipart)\n}\n\n// Parses listObjects response.\nexport function getListObjectsTransformer() {\n  return getConcater(xmlParsers.parseListObjects)\n}\n\n// Parses listObjects response.\nexport function getListObjectsV2Transformer() {\n  return getConcater(xmlParsers.parseListObjectsV2)\n}\n\n// Parses completeMultipartUpload response.\nexport function getCompleteMultipartTransformer() {\n  return getConcater(xmlParsers.parseCompleteMultipart)\n}\n\n// Parses getBucketLocation response.\nexport function getBucketRegionTransformer() {\n  return getConcater(xmlParsers.parseBucketRegion)\n}\n\n// Parses GET/SET BucketNotification response\nexport function getBucketNotificationTransformer() {\n  return getConcater(xmlParsers.parseBucketNotification)\n}\n\n// Parses a notification.\nexport function getNotificationTransformer() {\n  // This will parse and return each object.\n  return new JSONParser()\n}\n"]}