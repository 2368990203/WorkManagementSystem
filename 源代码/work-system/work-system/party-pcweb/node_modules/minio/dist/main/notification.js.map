{"version":3,"sources":["notification.js"],"names":[],"mappings":"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","file":"notification.js","sourcesContent":["/*\n * Minio Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2016 Minio, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from 'events'\nimport * as transformers from './transformers'\nimport { pipesetup, uriEscape } from './helpers'\n\n// Notification config - array of target configs.\n// Target configs can be\n// 1. Topic (simple notification service)\n// 2. Queue (simple queue service)\n// 3. CloudFront (lambda function)\nexport class NotificationConfig {\n  add(target) {\n    let instance = ''\n    if (target instanceof TopicConfig) {\n      instance = 'TopicConfiguration'\n    }\n    if (target instanceof QueueConfig) {\n      instance = 'QueueConfiguration'\n    }\n    if (target instanceof CloudFunctionConfig) {\n      instance = 'CloudFunctionConfiguration'\n    }\n    if (!this[instance]) this[instance] = []\n    this[instance].push(target)\n  }\n}\n\n// Base class for three supported configs.\nclass TargetConfig {\n  setId(id) {\n    this.Id = id\n  }\n  addEvent(newevent){\n    if (!this.Event) this.Event = []\n    this.Event.push(newevent)\n  }\n  addFilterSuffix(suffix) {\n    if (!this.Filter) this.Filter = {S3Key : {FilterRule:[]}}\n    this.Filter.S3Key.FilterRule.push({Name:\"suffix\", Value:suffix})\n  }\n  addFilterPrefix(prefix) {\n    if (!this.Filter) this.Filter = {S3Key : {FilterRule:[]}}\n    this.Filter.S3Key.FilterRule.push({Name:\"prefix\", Value:prefix})\n  }\n}\n\n// 1. Topic (simple notification service)\nexport class TopicConfig extends TargetConfig {\n  constructor(arn) {\n    super()\n    this.Topic = arn\n  }\n}\n\n// 2. Queue (simple queue service)\nexport class QueueConfig extends TargetConfig {\n  constructor(arn) {\n    super()\n    this.Queue = arn\n  }\n}\n\n// 3. CloudFront (lambda function)\nexport class CloudFunctionConfig extends TargetConfig {\n  constructor(arn) {\n    super()\n    this.CloudFunction = arn\n  }\n}\n\nexport const buildARN = (partition, service, region, accountId, resource) => {\n  return \"arn:\" + partition + \":\" + service + \":\" + region + \":\" + accountId + \":\" + resource\n}\n\n\nexport const ObjectCreatedAll                      = \"s3:ObjectCreated:*\"\nexport const ObjectCreatedPut                      = \"s3:ObjectCreated:Put\"\nexport const ObjectCreatedPost                     = \"s3:ObjectCreated:Post\"\nexport const ObjectCreatedCopy                     = \"s3:ObjectCreated:Copy\"\nexport const ObjectCreatedCompleteMultipartUpload  = \"sh:ObjectCreated:CompleteMultipartUpload\"\nexport const ObjectRemovedAll                      = \"s3:ObjectRemoved:*\"\nexport const ObjectRemovedDelete                   = \"s3:ObjectRemoved:Delete\"\nexport const ObjectRemovedDeleteMarkerCreated      = \"s3:ObjectRemoved:DeleteMarkerCreated\"\nexport const ObjectReducedRedundancyLostObject     = \"s3:ReducedRedundancyLostObject\"\n\n// Poll for notifications, used in #listenBucketNotification.\n// Listening constitutes repeatedly requesting s3 whether or not any\n// changes have occurred.\nexport class NotificationPoller extends EventEmitter {\n  constructor(client, bucketName, prefix, suffix, events) {\n    super()\n\n    this.client = client\n    this.bucketName = bucketName\n    this.prefix = prefix\n    this.suffix = suffix\n    this.events = events\n\n    this.ending = false\n  }\n\n  // Starts the polling.\n  start() {\n    this.ending = false\n\n    process.nextTick(() => {\n      this.checkForChanges()\n    })\n  }\n\n  // Stops the polling.\n  stop() {\n    this.ending = true\n  }\n\n  checkForChanges() {\n    // Don't continue if we're looping again but are cancelled.\n    if (this.ending) return\n\n    let method = 'GET'\n    var queries = []\n    if (this.prefix) {\n      var prefix = uriEscape(this.prefix)\n      queries.push(`prefix=${prefix}`)\n    }\n    if (this.suffix) {\n      var suffix = uriEscape(this.suffix)\n      queries.push(`suffix=${suffix}`)\n    }\n    if (this.events) {\n      this.events.forEach(s3event => queries.push('events='+uriEscape(s3event)))\n    }\n    queries.sort()\n\n    var query = ''\n    if (queries.length > 0) {\n      query = `${queries.join('&')}`\n    }\n    this.client.makeRequest({ method, bucketName: this.bucketName, query }, '', 200, '', true, (e, response) => {\n      if (e) return this.emit('error', e)\n\n      let transformer = transformers.getNotificationTransformer()\n      pipesetup(response, transformer)\n        .on('data', result => {\n          // Data is flushed periodically (every 5 seconds), so we should\n          // handle it after flushing from the JSON parser.\n          let records = result.Records\n          // If null (= no records), change to an empty array.\n          if (!records) records = []\n\n          // Iterate over the notifications and emit them individually.\n          records.forEach(record => {\n            this.emit('notification', record)\n          })\n\n          // If we're done, stop.\n          if (this.ending) response.destroy()\n        })\n        .on('error', e => this.emit('error', e))\n        .on('end', () => {\n          // Do it again, if we haven't cancelled yet.\n          process.nextTick(() => {\n            this.checkForChanges()\n          })\n        })\n    })\n  }\n\n}\n"]}